{% set version = "17.0.6" %}
{% set major = version.split(".")[0] %}

{% set bootstrap_version = "17.0.6" %}


package:
  name: libcxx_and_libcxxabi
  version: {{ version }}

source:
  - url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(".rc", "-rc") }}/llvm-project-{{ version.replace(".rc", "rc") }}.src.tar.xz
    sha256: 58a8818c60e6627064f312dbf46c02d9949956558340938b71cf731ad8bc0813
    patches:
      - patches/0001-Support-legacy-standalone-builds.patch
      # upstream removed fallbacks in case the underlying libc didn't support C11 in
      # https://github.com/llvm/llvm-project/commit/21f73d5826fb5024a27eaacafadfa316f58949c5;
      # using new libcxx with old clang versions (beyond what upstream supports) relies on
      # having these fallbacks in place. Drop if conflict-resolution becomes too messy.
      - patches/0004-Revert-libc-Remove-workaround-for-C11-features-on-co.patch

build:
  number: 1
  skip: true  # [win]
  
  # Prevent mixing with GNU's implementation
  ignore_run_exports:
    - libstdcxx-ng
  missing_dso_whitelist:
    - /usr/lib/libc++abi.dylib
    - /lib64/libpthread.so.0  # [linux]
    - /lib64/libc.so.6        # [linux]
    - /lib64/ld64.so.2        # [linux]
    - /lib64/libgcc_s.so.1    # [linux]
    - /lib64/ld-linux-aarch64.so.1  # [linux]
    - /lib64/ld-linux-x86-64.so.2   # [linux]

requirements:
  build:
    - cmake
    - ninja
    - make                    # [unix]
    - {{ compiler('cxx') }}   # [not linux]
    - {{ compiler('c') }}     # [not linux]
    - clangxx                 # [linux]
    - clang                   # [linux]
    - python                  # [not osx]
    - patch                   # [unix]
    - m2-patch                # [win]
    - llvm
  host:
    - clangdev {{ bootstrap_version }}  # [not osx]
    - llvm {{ bootstrap_version }}      # [not osx]

outputs:

  - name: libcxx-devel
    files:
      - include/c++                 # [unix]
      - Library/include/c++         # [win]
    requirements:
      host:
        - {{ pin_subpackage("libcxx", exact=True) }}
      run:
        - {{ pin_subpackage("libcxx", max_pin=None) }}

    test:
      requires:
        - clang                  # [osx]
        - clangxx
        - ld64                   # [osx]
        - cctools                # [osx]
        - llvmdev {{ bootstrap_version }}  # [osx]
        - llvm-tools             # [osx]
        - sysroot_{{ target_platform }}  # [linux]
        - {{ compiler('cxx') }}   # [not linux]
        - {{ compiler('c') }}     # [not linux]
      files:
        - test_sources
        - compile_test.sh   # [unix]
        - compile_test.bat  # [win]
      commands:
        # Dummy var for different hashes
        - echo {{ dummy_var }}                                    # [osx]
        - if not exist %LIBRARY_INC%\\c++\\v1\\iterator exit 1    # [win]
        - test -f $PREFIX/include/c++/v1/iterator                 # [unix]
        - bash compile_test.sh                                    # [unix]
        - compile_test.bat                                        # [win]
        # we do not ship libcxxabi on OSX - this breaks exception passing
        - if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi  # [osx]
        - test -f $PREFIX/lib/libc++abi.so                        # [linux]


  # Honestly not sure where the 'hardening' is used (or if) but leaving it here for
  # consistency. There are also some comments in here that I think may be out of date
  # but I haven't had a chance to check on them because they seem reasonable.
  - name: libcxx
    build:
      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}        # [hardening == "none"]
      string: debug_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [hardening == "debug"]
      run_exports:                                      # [hardening == "debug"]
        # packages built with hardened lib must not be installable without extra label
        - libcxx =*=debug*                              # [hardening == "debug"]
        - libcxx                                        # [hardening == "none"]
      ignore_run_exports_from:
        # we want to ignore libstdcxx, but not libgcc; the latter also comes in through
        # compiler('c'), and conda keeps that despite ignoring the cxx run-exports
        - {{ compiler('cxx') }}
    files:
        # I'm not sure why windows is included here, I'm guessing experimental?
      - lib/libc++.so               # [linux]
      - lib/libc++.so.*             # [linux]
      - lib/libc++.dylib            # [osx]
      - lib/libc++.*.dylib          # [osx]
      - Library/bin/c++*.dll        # [win]
      - lib/libc++.a                # [unix]
      - lib/libc++experimental.*    # [unix]
      - Library/lib/c++*.lib        # [win]
      - Library/lib/libc++*.lib     # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
      host:
        - {{ pin_subpackage("libcxxabi", exact=True) }}    # [linux]
      run:
        - {{ pin_subpackage("libcxxabi", exact=True) }}    # [linux]
      run_constrained:
        - sysroot_{{ target_platform }} >={{ c_stdlib_version }}    # [linux]
    test:
      commands:
        # presence of shared & static libraries
        - test -f $PREFIX/lib/libc++.so                 # [linux]
        - test -f $PREFIX/lib/libc++.dylib              # [osx]
        - test -f $PREFIX/lib/libc++.1.dylib            # [osx]
        - test -f $PREFIX/lib/libc++.1.0.dylib          # [osx]
        - test -f $PREFIX/lib/libc++.a                  # [unix]
        - test -f $PREFIX/lib/libc++experimental.a      # [unix]
        # absence of headers
        - test ! -d $PREFIX/include/c++                 # [unix]

  - name: libcxxabi
    build:
      skip: true  # [not linux]
    files:
      - lib/libc++abi.*
    requirements:
      build:
        - {{ compiler('c') }}
      run_constrained:
        - libcxx {{ version }}.*
    test:
      commands:
        - test -f $PREFIX/lib/libc++abi.so  # [linux]
        - test -f $PREFIX/lib/libc++.dylib  # [osx]

about:
  home: https://libcxx.llvm.org/
  license: Apache-2.0 WITH LLVM-exception
  license_file: libcxx/LICENSE.TXT
  license_family: Apache
  summary: LLVM C++ standard library
  description: |
    libc++ is an implementation of the C++ standard library developed by the LLVM project. 
    It supports C++11, C++14, C++17, and parts of C++20. 
    This package also includes libc++abi, which provides the low-level runtime support needed 
    by libc++, including exception handling and other ABI-related features.
  dev_url: https://github.com/llvm/llvm-project
  doc_url: https://libcxx.llvm.org/

extra:
  skip-lints:
    # there are false positives for this check,
    # for some of the individual outputs.
    - should_use_compilers
  recipe-maintainers:
    - SylvainCorlay
    - inducer
    - jakirkham
    - isuruf
    - beckermr
    - timsnyder
    - h-vetinari
  feedstock-name: libcxx